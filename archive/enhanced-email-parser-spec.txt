metadata:
  project_name: "Email Parser Development"
  version: "1.0.0"
  description: >
    Enterprise-grade email processing system with MIME parsing,
    security features, and performance optimization.
  created_date: "2025-02-25"
  framework_version: "Enhanced-Intent v3.0"  # Updated from Perfect-Intent v2.0
  last_updated: "2025-03-16"

project_context:
  role:
    title: "Expert Python Developer"
    specialization: "Enterprise Email Processing Systems"
    focus_areas:
      - "MIME parsing"
      - "Security implementation"
      - "Performance optimization"
  background: >
    This project addresses the need for a robust, secure, and efficient
    email parsing system for enterprise environments with high
    volume email processing requirements.
  success_criteria:
    - "Complete implementation of all core functionality"
    - "Meet or exceed all performance metrics"
    - "Pass all security and quality assurance tests"
    - "Deliver comprehensive documentation"

technical_requirements:
  environment:
    python_version: "3.12.9"
    distribution: "Anaconda"
    ide: "VS Code"
    extensions:
      - "Python"
      - "Pylance"
      - "Python Test Explorer"
    package_source: "conda-forge"
    virtual_env: true

  performance_metrics:
    processing_speed:
      requirement: "Process 1MB emails in <2s"
      validation_method: "Benchmark testing with sample emails"
      priority: "High"
    memory_usage:
      requirement: "<100MB per 1MB email"
      validation_method: "Memory profiling during processing"
      priority: "High"
    batch_processing:
      requirement: "100 emails/minute"
      validation_method: "Stress testing with email batches"
      priority: "Medium"

  core_functionality:
    email_processing:
      mime_structure:
        description: "Parse and extract MIME structure from emails"
        requirements:
          - "Support multi-part MIME messages"
          - "Handle nested MIME structures"
          - "Extract MIME headers and metadata"
        validation: "Unit tests against sample emails"
      
      component_extraction:
        description: "Extract individual components from email"
        requirements:
          - "Body text extraction (plain and HTML)"
          - "Attachment identification and extraction"
          - "Inline image extraction"
          - "Unique filename generation for all extracted files"
          - "Positional reference insertion in processed text"
        validation: "Component verification against source emails"
      
      excel_conversion:
        description: "Convert Excel workbook attachments to CSV"
        requirements:
          - "Detect Excel file attachments (.xlsx, .xls)"
          - "Prompt user for conversion preference"
          - "Convert each worksheet to separate CSV files"
          - "Maintain original Excel file alongside CSV versions"
        validation: "Test with various Excel file formats and structures"
      
      encoding_support:
        description: "Support multiple text and binary encodings"
        requirements:
          - "UTF-8, UTF-16, ASCII, ISO-8859"
          - "Base64, Quoted-Printable"
          - "UUencode, BinHex"
        validation: "Process emails with various encodings"
      
      secure_file_handling:
        description: "Securely handle potentially malicious content"
        requirements:
          - "Sanitize file names and paths"
          - "Generate unique filenames to prevent overwriting"
          - "Validate file types against expected MIME types"
          - "Implement size limits and quota systems"
          - "Scan attachments for malicious content"
        validation: "Security testing with crafted malicious emails"
    
    output_structure:
      base_directory: "output/"
      subdirectories:
        processed_text:
          path: "processed_text/"
          contents: "Extracted text content from emails"
          format: "UTF-8 text files"
          requirements:
            - "Include positional references to extracted attachments"
            - "Reference unique filenames for all attachments"
            - "Maintain extracted content positions in original email"
            - "Include references to converted Excel CSV files"
            - "Include references to extracted inline images"
        attachments:
          path: "attachments/"
          contents: "Extracted file attachments"
          format: "Original file formats"
          requirements:
            - "Use unique filenames to prevent overwriting"
            - "Maintain extension for file type identification"
            - "Include timestamp and unique identifier in filename"
            - "Map between original filename and unique filename in metadata"
        inline_images:
          path: "inline_images/"
          contents: "Images embedded in email body"
          format: "Original image formats (PNG, JPG, GIF, etc.)"
          requirements:
            - "Use unique filenames to prevent overwriting"
            - "Maintain reference to original content ID"
            - "Include timestamp and unique identifier in filename"
            - "Reference in processed text at original position"
        converted_excel:
          path: "converted_excel/"
          contents: "CSV files converted from Excel workbooks"
          format: "CSV files (one per worksheet)"
          requirements:
            - "Use unique filenames derived from original Excel filename"
            - "Include worksheet name in CSV filename"
            - "Ensure CSV files are referenced in processed text at Excel attachment position"
            - "Maintain mapping between original Excel file and generated CSV files"
      metadata:
        description: "JSON metadata file containing email details"
        path: "output/metadata.json"
        contents:
          - "Email headers"
          - "Processing timestamp"
          - "List of extracted components with paths"
          - "Mapping of original filenames to unique filenames"
          - "Positional information for each extraction"
          - "Excel to CSV conversion mappings"
          - "Processing statistics"

development_standards:
  code_quality:
    type_annotations:
      requirement: "Complete type annotations for all functions"
      tools:
        - "mypy for static type checking"
        - "Type stubs for third-party libraries"
    
    pep8_compliance:
      requirement: "Adhere to PEP 8 style guidelines"
      tools:
        - "black for code formatting"
        - "isort for import sorting"
      exceptions:
        - "Line length may be extended to 100 characters"
    
    error_handling:
      requirement: "Comprehensive error handling and reporting"
      approach:
        - "Custom exception hierarchy for email processing errors"
        - "Detailed error messages with context"
        - "Graceful degradation for non-critical failures"
        - "Structured logging for all errors"
  
  testing:
    requirement: "Comprehensive test coverage"
    approach:
      unit_tests:
        - "Test each function and class in isolation"
        - "Mock external dependencies"
        - "Test edge cases and error conditions"
      integration_tests:
        - "Test component interactions"
        - "End-to-end processing tests"
      coverage:
        - "Minimum 90% code coverage"
        - "100% coverage for core parsing functions"
    tools:
      - "pytest for test framework"
      - "pytest-cov for coverage reporting"
  
  security:
    requirement: "Rigorous security validation"
    approach:
      - "Validate all input data"
      - "Sanitize file paths and names"
      - "Implement file type verification"
      - "Set size limits for all operations"
      - "Check for malicious content patterns"
    tools:
      - "bandit for security static analysis"
      - "Safety for dependency vulnerability checking"
  
  documentation:
    api_docs:
      requirement: "Complete API documentation"
      format: "Google docstring format"
      tools: "Sphinx for documentation generation"
    implementation_guide:
      requirement: "Technical implementation documentation"
      contents:
        - "Architecture overview"
        - "Component interaction diagrams"
        - "Data flow diagrams"
    usage_examples:
      requirement: "Comprehensive usage examples"
      format: "Jupyter notebooks and Python scripts"

implementation_phases:
  phase_dependencies:
    phase_1_to_2:
      inputs_required:
        - "Functional basic email parsing implementation"
        - "Project structure and environment setup"
        - "Initial test suite"
      outputs_expected:
        - "Working development environment"
        - "Project skeleton with initial implementation"
        - "Basic MIME parser functionality"
    
    phase_2_to_3:
      inputs_required:
        - "Complete component extraction functionality"
        - "Secure file handling implementation"
        - "Excel conversion functionality"
        - "Error handling framework"
      outputs_expected:
        - "Complete email processing implementation"
        - "Expanded test coverage"
        - "Security validation results"
    
    phase_3_to_completion:
      inputs_required:
        - "Optimized processing capabilities"
        - "Complete batch processing functionality"
        - "Performance benchmark results"
      outputs_expected:
        - "Production-ready implementation"
        - "Complete test suite with high coverage"
        - "Comprehensive documentation"

  phase_1:
    name: "Foundation"
    objectives:
      - "Set up development environment"
      - "Implement core project structure"
      - "Create basic MIME parsing functionality"
    tasks:
      - "Configure virtual environment with dependencies"
      - "Set up testing framework and CI pipeline"
      - "Implement basic email parsing class structure"
      - "Create simple MIME parser with header extraction"
      - "Set up output directory structure"
    deliverables:
      - "Working development environment"
      - "Project skeleton with initial implementation"
      - "Basic test suite"
      - "CI/CD pipeline configuration"
    completion_criteria:
      - "Successfully parse simple emails"
      - "Extract basic headers and text content"
      - "Pass initial test suite"
  
  phase_2:
    name: "Core Development"
    objectives:
      - "Implement complete component extraction"
      - "Develop secure file handling"
      - "Create comprehensive error management"
      - "Implement Excel-to-CSV conversion functionality"
    tasks:
      - "Implement MIME part identification and extraction"
      - "Develop attachment handling with security measures"
      - "Create text and HTML content extraction"
      - "Implement inline image extraction"
      - "Develop error handling framework"
      - "Implement comprehensive logging system"
      - "Create Excel workbook detection and conversion system"
      - "Implement user prompting mechanism for conversion preferences"
      - "Build unique filename generation system"
      - "Develop positional reference tracking and insertion"
      - "Implement file mapping in processed text output"
    deliverables:
      - "Complete email parsing implementation"
      - "Secure attachment handling system"
      - "Error handling and logging framework"
      - "Expanded test suite"
    completion_criteria:
      - "Successfully extract all components from complex emails"
      - "Handle various encodings correctly"
      - "Process attachments securely"
      - "Pass expanded test suite"
  
  phase_3:
    name: "Enhancement"
    objectives:
      - "Implement batch processing capabilities"
      - "Optimize performance"
      - "Enhance security features"
    tasks:
      - "Develop concurrent processing capabilities"
      - "Implement performance optimizations"
      - "Enhance security features with deeper validation"
      - "Create advanced logging and monitoring"
      - "Implement email categorization and filtering"
    deliverables:
      - "Optimized batch processing system"
      - "Performance benchmarking suite"
      - "Enhanced security scanning"
      - "Advanced monitoring and reporting"
    completion_criteria:
      - "Meet or exceed performance metrics"
      - "Successfully process email batches"
      - "Pass security and performance testing"

quality_control:
  testing_requirements:
    unit_tests:
      description: "Tests for individual components"
      coverage_requirement: "90% code coverage minimum"
      tools: "pytest, pytest-cov"
      focus_areas:
        - "MIME parsing accuracy"
        - "Encoding handling"
        - "Security validation"
        - "Error handling"
    
    integration_tests:
      description: "Tests for component interactions"
      approach: "End-to-end email processing tests"
      test_data: "Corpus of diverse email samples"
      focus_areas:
        - "Complete processing workflow"
        - "Output structure validation"
        - "Error recovery scenarios"
    
    performance_tests:
      description: "Benchmarking against performance metrics"
      approach: "Automated benchmarking with various email sizes"
      metrics:
        - "Processing time"
        - "Memory usage"
        - "CPU utilization"
        - "Batch processing throughput"
    
    security_tests:
      description: "Validation of security measures"
      approach: "Testing with intentionally malicious inputs"
      focus_areas:
        - "Path traversal prevention"
        - "Malicious file detection"
        - "Oversized content handling"
        - "Encoding exploit prevention"
  
  quality_gates:
    foundation_phase:
      required_tests: "Basic unit tests for MIME parsing"
      required_documentation: "Initial API documentation"
      approval_criteria: "Passing unit tests for basic functionality"
    
    core_development_phase:
      required_tests: "Expanded unit and integration tests"
      required_documentation: "Complete API and implementation documentation"
      approval_criteria: "90% test coverage and passing security tests"
    
    enhancement_phase:
      required_tests: "Complete test suite including performance tests"
      required_documentation: "Comprehensive documentation and examples"
      approval_criteria: "Meeting all performance metrics and security requirements"
  
  documentation_standards:
    api_documentation:
      description: "Technical API references"
      format: "Google docstring style"
      content_requirements:
        - "Function purpose and behaviour"
        - "Parameter descriptions with types"
        - "Return value descriptions with types"
        - "Exception information"
        - "Usage examples"
      tools: "Sphinx with Napoleon extension"
    
    implementation_guide:
      description: "Internal technical documentation"
      format: "Markdown with diagrams"
      content_requirements:
        - "Architecture overview"
        - "Component relationships"
        - "Data flow diagrams"
        - "Design decisions and rationale"
        - "Future extension points"
      tools: "PlantUML for diagrams"
    
    error_handling_docs:
      description: "Error handling documentation"
      format: "Structured reference"
      content_requirements:
        - "Exception hierarchy"
        - "Error codes and meanings"
        - "Recovery procedures"
        - "Logging details"
    
    usage_examples:
      description: "Example code for common use cases"
      format: "Python scripts and Jupyter notebooks"
      content_requirements:
        - "Basic email parsing"
        - "Handling complex MIME structures"
        - "Batch processing"
        - "Custom parsing configurations"
        - "Error handling patterns"
        - "Excel workbook to CSV conversion"
        - "Customizing conversion preferences"

critical_rules:
  - rule: "Maintain security standards"
    description: >
      Implement all security measures to prevent vulnerabilities including
      path traversal, malicious file execution, and buffer overflows.
    validation: "Security test suite and code review"
    priority: "Critical"
  
  - rule: "Implement comprehensive error handling"
    description: >
      Create a robust error handling system that captures and reports
      all errors while maintaining system stability.
    validation: "Error injection testing and code review"
    priority: "Critical"
  
  - rule: "Follow Test-Driven Development practices"
    description: >
      Write tests before implementing features and maintain high
      test coverage throughout development.
    validation: "CI pipeline verification and coverage reports"
    priority: "High"
  
  - rule: "Ensure modularity and extensibility"
    description: >
      Design the system with clear component boundaries and extension
      points to support future enhancements.
    validation: "Architecture review and component testing"
    priority: "High"
  
  - rule: "Document thoroughly"
    description: >
      Provide comprehensive documentation for APIs, implementation
      details, and usage examples.
    validation: "Documentation review and completeness check"
    priority: "High"

dependencies:
  development_dependencies:
    testing:
      - name: "pytest"
        version: ">=7.0.0"
        purpose: "Test framework"
      - name: "pytest-cov"
        version: ">=4.0.0"
        purpose: "Test coverage reporting"
    
    code_quality:
      - name: "black"
        version: ">=23.0.0"
        purpose: "Code formatting"
      - name: "isort"
        version: ">=5.0.0"
        purpose: "Import sorting"
      - name: "mypy"
        version: ">=1.0.0"
        purpose: "Static type checking"
  
  runtime_dependencies:
    email_processing:
      - name: "email-validator"
        version: ">=2.0.0"
        purpose: "Email validation"
    
    file_handling:
      - name: "pypdf2"
        version: ">=3.0.0"
        purpose: "PDF file processing"
      - name: "pillow"
        version: ">=10.0.0"
        purpose: "Image processing"
      - name: "filetype"
        version: ">=1.0.0"
        purpose: "File type detection"
      - name: "openpyxl"
        version: ">=3.1.0"
        purpose: "Excel file processing"
      - name: "pandas"
        version: ">=2.0.0"
        purpose: "Data manipulation and CSV conversion"

risk_management:
  identified_risks:
    security_risks:
      - risk: "Malicious file attachments"
        severity: "High"
        mitigation: "Implement thorough file scanning and validation"
      
      - risk: "Path traversal attacks"
        severity: "High"
        mitigation: "Strict file path sanitization and validation"
      
      - risk: "Buffer overflow vulnerabilities"
        severity: "Medium"
        mitigation: "Implement size limits and input validation"
    
    performance_risks:
      - risk: "High memory usage with large attachments"
        severity: "Medium"
        mitigation: "Implement streaming processing and memory management"
      
      - risk: "Slow processing with complex MIME structures"
        severity: "Medium"
        mitigation: "Optimize parsing algorithms and concurrent processing"
    
    implementation_risks:
      - risk: "Incomplete error handling"
        severity: "High"
        mitigation: "Comprehensive error handling framework and testing"
      
      - risk: "Encoding detection failures"
        severity: "Medium"
        mitigation: "Robust encoding detection and fallback mechanisms"
  
  contingency_plans:
    security_incidents:
      - "Immediate isolation of affected components"
      - "Logging and reporting of security events"
      - "Emergency patch development process"
    
    performance_issues:
      - "Fallback to sequential processing for problematic emails"
      - "Dynamic resource allocation based on email complexity"
      - "Queue management for high load scenarios"
    
    implementation_failures:
      - "Graceful degradation modes for non-critical components"
      - "Comprehensive logging for issue diagnosis"
      - "Recovery mechanisms from error states"

response_guidelines:
  technical_validation:
    description: "Validate all technical requirements"
    checklist:
      - "Verify compatibility with specified Python version"
      - "Confirm all core functionality is implemented"
      - "Validate against performance metrics"
      - "Ensure all critical rules are followed"
  
  environment_compatibility:
    description: "Verify environment compatibility"
    checklist:
      - "Confirm Anaconda environment configuration"
      - "Verify VS Code extension compatibility"
      - "Check dependency compatibility"
      - "Validate conda-forge package availability"
  
  security_assessment:
    description: "Check security implications"
    checklist:
      - "Identify potential security vulnerabilities"
      - "Verify security measure implementation"
      - "Confirm secure file handling practices"
      - "Validate input sanitization"
  
  performance_verification:
    description: "Confirm performance impact"
    checklist:
      - "Verify processing speed requirements"
      - "Validate memory usage constraints"
      - "Confirm batch processing capabilities"
      - "Identify potential optimization opportunities"
  
  documentation_review:
    description: "Ensure documentation coverage"
    checklist:
      - "Confirm API documentation completeness"
      - "Verify implementation guide coverage"
      - "Validate error handling documentation"
      - "Check usage example comprehensiveness"

implementation_support:
  missing_information_request:
    description: "Request any missing critical information needed for implementation support"
    potential_areas:
      - "Specific email format requirements or limitations"
      - "Security certification requirements"
      - "Integration points with other systems"
      - "Error reporting and monitoring requirements"
      - "Deployment environment details"
  
  clarification_process:
    description: "Process for seeking clarification on requirements"
    steps:
      - "Identify specific ambiguous or incomplete requirements"
      - "Formulate clear, concise questions"
      - "Prioritize questions by implementation impact"
      - "Request clarification through appropriate channels"
  
  progress_reporting:
    description: "Guidelines for reporting implementation progress"
    frequency: "Weekly status updates"
    format: "Structured report with completion percentages"
    contents:
      - "Completed tasks and deliverables"
      - "Current phase status"
      - "Upcoming milestones"
      - "Blockers and issues requiring attention"
      - "Risk status and mitigation activities"

version_control:
  specification_version: "1.1.0"
  original_version: "1.0.0"
  enhanced_date: "2025-03-16"
  enhancement_framework: "Enhanced-Intent v3.0"
  enhancements:
    - "Added phase transition dependencies and criteria"
    - "Enhanced risk management section"
    - "Added quality gates for development phases"
    - "Added progress reporting guidelines"
    - "Improved organization and structure"
    - "Added overall project success criteria"
