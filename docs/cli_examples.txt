# CLI Examples for Email Parser

## Setup

Activate your virtual environment first:

```bash
# Windows
venv\Scripts\activate

# Linux/macOS
source venv/bin/activate
```

## Available Features

- **PDF Conversion**: Extract text and images from PDF files
- **DOCX Conversion**: Convert DOCX to Markdown with advanced features
  - AI-ready chunking with multiple strategies
  - Metadata extraction and style preservation
  - Image extraction and comments processing
- **Excel Conversion**: Convert Excel files to CSV format
- **Interactive CLI Mode**: User-friendly guided interface with processing profiles
- **Batch Processing**: Process multiple files efficiently

## Interactive Mode (Recommended)

The interactive CLI provides a user-friendly interface with guided workflows:

```bash
python -m email_parser.cli.interactive
```

Interactive mode features:
- Content scanning with smart recommendations
- Processing profile selection (Quick, Comprehensive, AI-Ready, Archive, Research)
- Real-time progress tracking
- Batch processing support
- Configuration management

## Email Processing Commands

### Basic Email Processing

```bash
# Process email with default settings
python -m email_parser process --input email.eml --output output/

# Process email with specific converters
python -m email_parser process --input email.eml --output output/ --convert-excel
python -m email_parser process --input email.eml --output output/ --convert-pdf
python -m email_parser process --input email.eml --output output/ --convert-docx
```

### PDF Conversion Options

```bash
# PDF with specific extraction modes
python -m email_parser process --input email.eml --output output/ --convert-pdf --pdf-mode text
python -m email_parser process --input email.eml --output output/ --convert-pdf --pdf-mode images  
python -m email_parser process --input email.eml --output output/ --convert-pdf --pdf-mode all
```

### DOCX Advanced Features

```bash
# DOCX with all advanced features
python -m email_parser process --input email.eml --output output/ \
    --convert-docx \
    --docx-chunking \
    --docx-images \
    --docx-metadata \
    --docx-styles \
    --docx-comments

# Custom DOCX chunking settings
python -m email_parser process --input email.eml --output output/ \
    --convert-docx \
    --docx-chunk-size 2000 \
    --docx-chunk-overlap 200 \
    --docx-chunk-strategy hybrid
```

### Combined Processing

```bash
# Process with all converters
python -m email_parser process --input email.eml --output output/ \
    --convert-excel \
    --convert-pdf --pdf-mode all \
    --convert-docx --docx-chunking --docx-images --docx-styles

# Process with file size limits
python -m email_parser process --input email.eml --output output/ \
    --max-attachment-size 10000000
```

## Batch Email Processing

### Basic Batch Operations

```bash
# Process all emails in directory
python -m email_parser batch --input emails/ --output output/

# Batch processing with specific converters
python -m email_parser batch --input emails/ --output output/ \
    --convert-excel \
    --convert-pdf \
    --convert-docx
```

### Advanced Batch Options

```bash
# Process specific file patterns
python -m email_parser batch --input emails/ --output output/ \
    --pattern "*.eml" \
    --convert-pdf

# Custom batch size for performance
python -m email_parser batch --input emails/ --output output/ \
    --batch-size 50 \
    --convert-docx --docx-chunking

# Comprehensive batch processing
python -m email_parser batch --input emails/ --output output/ \
    --convert-docx \
    --docx-chunking \
    --docx-images \
    --docx-metadata \
    --docx-styles \
    --docx-comments \
    --docx-chunk-size 1500
```

## Available CLI Options

### Process Command Options

| Option | Description |
|--------|-------------|
| `--input` | Input email file (required) |
| `--output` | Output directory (required) |
| `--convert-excel` | Convert Excel attachments to CSV |
| `--convert-pdf` | Convert PDF attachments to Markdown |
| `--pdf-mode` | PDF extraction mode: text, images, all (default: all) |
| `--convert-docx` | Convert DOCX attachments to Markdown |
| `--docx-metadata` | Extract metadata from DOCX files (default: True) |
| `--docx-images` | Extract images from DOCX files |
| `--docx-chunking` | Enable AI-ready document chunking |
| `--docx-chunk-size` | Maximum tokens per chunk (default: 2000) |
| `--docx-chunk-overlap` | Token overlap between chunks (default: 200) |
| `--docx-chunk-strategy` | Chunking strategy: token, semantic, hybrid (default: hybrid) |
| `--docx-styles` | Extract style information |
| `--docx-comments` | Extract comments and track changes (default: True) |
| `--max-attachment-size` | Maximum attachment size in bytes |

### Batch Command Options

All process options plus:
- `--pattern`: File pattern to match (e.g., "*.eml")
- `--batch-size`: Number of files to process in each batch

### Getting Help

```bash
python -m email_parser --help
python -m email_parser process --help  
python -m email_parser batch --help
```

## Testing and Verification

### Basic Setup Verification

```bash
# Test basic imports
python -c "import email_parser; print('Email Parser: Success!')"
python -c "import mistralai; print('MistralAI: Success!')"

# Check if API keys are configured
python -c "import os; print('MistralAI API Key set:', bool(os.environ.get('MISTRALAI_API_KEY')))"

# Show help
python -m email_parser --help
```

### Running Tests

```bash
# Run the full test suite
pytest

# Run with coverage report
pytest --cov=email_parser

# Run specific test categories
pytest tests/unit/
pytest tests/integration/
```

## Direct File Conversion Commands

### Single File Conversion

```bash
# Convert a single document
python -m email_parser.cli.main convert --file document.pdf --output output/
python -m email_parser.cli.main convert --file document.docx --output output/
python -m email_parser.cli.main convert --file spreadsheet.xlsx --output output/
```

### Batch File Conversion

```bash
# Convert all documents in a directory
python -m email_parser.cli.main convert-batch --directory docs/ --output output/

# Convert with specific file types
python -m email_parser.cli.main convert-batch --directory docs/ --output output/ --pattern "*.pdf"
```

## Configuration

### API Keys Setup

The system requires API keys for certain features:

```bash
# Set MistralAI API key for PDF processing
export MISTRALAI_API_KEY="your_api_key_here"

# On Windows
set MISTRALAI_API_KEY=your_api_key_here
```

### Configuration Files

Configuration is handled through YAML files in the `config/` directory:
- `default.yaml` - Default configuration settings
- Custom configurations can be created for specific use cases

## Output Structure

The system creates organized output directories:

```
output/
├── processed_text/              # Email text content
├── attachments/                 # Original attachments  
├── converted_excel/             # CSV conversions
├── converted_pdf/               # PDF markdown output
├── converted_docx/              # DOCX conversions
│   ├── document.md             # Main markdown
│   └── document_docx_output/   # Advanced features
│       ├── metadata.json
│       ├── styles.json
│       ├── images/             # Extracted images
│       └── chunks/             # AI-ready chunks
└── metadata.json               # Processing summary
```