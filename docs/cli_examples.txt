# CLI Examples for Email Parser

## üìã Platform-Specific Instructions

**IMPORTANT**: Choose the correct command format for your development environment:

### üêß **Claude Code (WSL2/Linux)**
If using Claude Code and running IN WSL2/Ubuntu environment:
- **See**: [CLAUDE.md](../CLAUDE.md) for complete instructions
- **Commands**: Use native Linux format (shown below)

### ü™ü **Claude Desktop (Windows)**  
If using Claude Desktop on Windows 11 accessing WSL2:
- **See**: [CLAUDE-DESKTOP.md](../CLAUDE-DESKTOP.md) for complete instructions
- **Commands**: All commands need `wsl -d Ubuntu` prefix

‚ö†Ô∏è **Virtual Environment Required**: Always activate the virtual environment first:

**Claude Code (WSL2):**
```bash
source email-parser-env/Scripts/activate
```

**Claude Desktop (Windows):**
```bash
wsl -d Ubuntu source /path/to/email-parser/email-parser-env/Scripts/activate
```

‚ö†Ô∏è **Implementation Status**: 
- ‚úÖ Basic email processing (WORKING)
- ‚úÖ Excel conversion (WORKING)  
- ‚úÖ PDF conversion options (WORKING - Phase 1 Complete)
- ‚úÖ **DOCX conversion with advanced features (WORKING - Phase 2 Complete)**
  - ‚úÖ AI-ready chunking (3 strategies)
  - ‚úÖ Enhanced metadata extraction  
  - ‚úÖ Style preservation
  - ‚úÖ Advanced image extraction
  - ‚úÖ Complete CLI integration
- ‚úÖ **Interactive CLI Mode (WORKING - Phase 3.5 Complete 2025-07-06)**
  - ‚úÖ Email content scanning with smart recommendations
  - ‚úÖ Processing profiles system (5 built-in profiles)
  - ‚úÖ Real-time progress tracking with rich UI
  - ‚úÖ Batch processing support with guided workflow
  - ‚úÖ Configuration management and preferences persistence

All features are fully implemented and tested. Interactive mode is now the recommended interface.

# ==========================================================
# ACTUAL WORKING COMMANDS (Verified 2025-07-06)
# ==========================================================

**Note**: Commands below are shown in Claude Code (WSL2/Linux) format. 
For Claude Desktop (Windows), prefix each command with `wsl -d Ubuntu bash -c "cd /path/to/email-parser && source email-parser-env/Scripts/activate && [command]"`

## INTERACTIVE MODE (RECOMMENDED) ‚úÖ NEW

# Start interactive mode with guided workflows (Claude Code)
python -m email_parser.cli.interactive

# Start interactive mode (Claude Desktop - Windows)
wsl -d Ubuntu bash -c "cd /path/to/email-parser && source email-parser-env/Scripts/activate && python -m email_parser.cli.interactive"

# Interactive mode provides:
# - Email content scanning with smart recommendations
# - Processing profile selection (Quick, Comprehensive, AI-Ready, Archive, Dev)
# - Real-time progress tracking with beautiful UI
# - Batch processing support with guided workflow
# - Configuration management and API setup
# - Preferences persistence across sessions

## SINGLE EMAIL PROCESSING

# Basic email processing
python -m email_parser process --input email.eml --output output/

# Process email with Excel conversion
python -m email_parser process --input email.eml --output output/ --convert-excel

# Process email with PDF conversion  
python -m email_parser process --input email.eml --output output/ --convert-pdf

# Process email with PDF conversion modes
python -m email_parser process --input email.eml --output output/ --convert-pdf --pdf-mode text
python -m email_parser process --input email.eml --output output/ --convert-pdf --pdf-mode images  
python -m email_parser process --input email.eml --output output/ --convert-pdf --pdf-mode all

# Process email with DOCX conversion (Week 2 Complete)
python -m email_parser process --input email.eml --output output/ --convert-docx

# Process email with DOCX advanced features (All Week 2 Features)
python -m email_parser process --input email.eml --output output/ \
    --convert-docx \
    --docx-chunking \
    --docx-images \
    --docx-metadata \
    --docx-styles \
    --docx-comments

# Process email with custom DOCX chunking settings
python -m email_parser process --input email.eml --output output/ \
    --convert-docx \
    --docx-chunk-size 2000 \
    --docx-chunk-overlap 200 \
    --docx-chunk-strategy hybrid

# Process email with all converters enabled
python -m email_parser process --input email.eml --output output/ \
    --convert-excel \
    --convert-pdf --pdf-mode all \
    --convert-docx --docx-chunking --docx-images --docx-styles

# Process email with attachment size limit
python -m email_parser process --input email.eml --output output/ \
    --max-attachment-size 10000000

## BATCH EMAIL PROCESSING

# Basic batch processing from directory
python -m email_parser batch --input emails/ --output output/

# Batch processing with conversions
python -m email_parser batch --input emails/ --output output/ \
    --convert-excel \
    --convert-pdf \
    --convert-docx

# Batch processing with specific file pattern
python -m email_parser batch --input emails/ --output output/ \
    --pattern "*.eml" \
    --convert-pdf

# Batch processing with custom batch size
python -m email_parser batch --input emails/ --output output/ \
    --batch-size 50 \
    --convert-docx --docx-chunking

# Batch processing with all DOCX Week 2 features
python -m email_parser batch --input emails/ --output output/ \
    --convert-docx \
    --docx-chunking \
    --docx-images \
    --docx-metadata \
    --docx-styles \
    --docx-comments \
    --docx-chunk-size 1500

# ==========================================================
# AVAILABLE CLI OPTIONS (As of 2025-07-01)
# ==========================================================

## Process Command Options:
# --input              Input email file (required)
# --output             Output directory (required)  
# --convert-excel      Convert Excel to CSV
# --convert-pdf        Convert PDF to Markdown
# --pdf-mode          PDF extraction mode: text, images, all (default: all)
# --convert-docx       Convert DOCX to Markdown
# --docx-metadata      Extract metadata from DOCX files (default: True)
# --docx-images        Extract images from DOCX files
# --docx-chunking      Enable AI-ready document chunking
# --docx-chunk-size    Maximum tokens per chunk (default: 2000)
# --docx-chunk-overlap Token overlap between chunks (default: 200)
# --docx-chunk-strategy Chunking strategy: token, semantic, hybrid (default: hybrid)
# --docx-styles        Extract style information
# --docx-comments      Extract comments and track changes (default: True)
# --max-attachment-size Maximum attachment size in bytes

## Batch Command Options:
# All process options plus:
# --pattern            File pattern to match
# --batch-size         Batch size

## Help Commands:
# python -m email_parser --help
# python -m email_parser process --help  
# python -m email_parser batch --help

# ==========================================================
# TESTING AND VERIFICATION
# ==========================================================

# Test basic imports
python -c "import email_parser; print('Email Parser: Success!')"
python -c "import mistralai; print('MistralAI: Success!')"

# Check if API keys are set
python -c "import os; print('MistralAI API Key set:', bool(os.environ.get('MISTRALAI_API_KEY')))"
# Show help
python -m email_parser --help

# ==========================================================
# PLATFORM-SPECIFIC COMMAND EXAMPLES
# ==========================================================

## Claude Desktop (Windows) Examples:

# Basic processing (Windows format):
wsl -d Ubuntu bash -c "cd /path/to/email-parser && source email-parser-env/Scripts/activate && python -m email_parser process --input email.eml --output output/"

# With DOCX features (Windows format):
wsl -d Ubuntu bash -c "cd /path/to/email-parser && source email-parser-env/Scripts/activate && python -m email_parser process --input email.eml --output output/ --convert-docx --docx-chunking --docx-images"

# Testing (Windows format):
wsl -d Ubuntu bash -c "cd /path/to/email-parser && source email-parser-env/Scripts/activate && pytest"

## For complete platform-specific examples, see:
- [CLAUDE.md](../CLAUDE.md) - Claude Code project instructions