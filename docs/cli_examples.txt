# CLI Examples for Email Parser

‚ö†Ô∏è **Virtual Environment Required**: Always activate the virtual environment before running CLI commands:

```bash
# Windows PowerShell
.\email-parser-env\Scripts\Activate.ps1

# Linux/Mac/WSL2
source email-parser-env/bin/activate
```

‚ö†Ô∏è **Implementation Status**: 
- ‚úÖ Basic email processing (WORKING)
- ‚úÖ Excel conversion (WORKING)  
- üîÑ PDF conversion options (PLANNED - not yet implemented in CLI)

The PDF conversion options shown below are planned features that will be implemented 
in the CLI during Phase 1, Week 2-3 of development. The core PDF conversion functionality 
exists but is not yet exposed through the command line interface.

# ==========================================================
# SINGLE EMAIL PROCESSING
# ==========================================================

# Basic email processing with default settings (‚úÖ WORKING)
python -m email_parser process --input path/to/email.eml --output output/

# Process email with Excel to CSV conversion enabled (‚úÖ WORKING)
python -m email_parser process --input path/to/email.eml --output output/ --convert-excel

# Process email with PDF to Markdown conversion enabled (üîÑ PLANNED)
python -m email_parser process --input path/to/email.eml --output output/ --convert-pdf

# Process email with PDF conversion and custom settings (üîÑ PLANNED)
python -m email_parser process --input path/to/email.eml --output output/ \
    --convert-pdf \
    --pdf-mode all \
    --pdf-image-limit 10 \
    --pdf-image-min-size 200 \
    --pdf-paginate

# Process email with PDF text-only extraction (üîÑ PLANNED)
python -m email_parser process --input path/to/email.eml --output output/ \
    --convert-pdf \
    --pdf-mode text

# Process email with PDF images-only extraction (üîÑ PLANNED)
python -m email_parser process --input path/to/email.eml --output output/ \
    --convert-pdf \
    --pdf-mode images \
    --pdf-image-limit 20

# Process email with both Excel and PDF conversion (üîÑ PLANNED)
python -m email_parser process --input path/to/email.eml --output output/ \
    --convert-excel \
    --convert-pdf \
    --pdf-mode all

# Process email with security options
python -m email_parser process --input path/to/email.eml --output output/ \
    --max-attachment-size 10000000 \
    --allowed-extensions .pdf,.docx,.xlsx,.txt,.jpg,.png \
    --enable-malware-scan \
    --validate-pdf-content

# Process email with custom performance settings
python -m email_parser process --input path/to/email.eml --output output/ \
    --chunk-size 1048576 \
    --enable-caching \
    --use-memory-mapping \
    --pdf-cache-enabled

# Process email with custom output structure
python -m email_parser process --input path/to/email.eml \
    --output-dir output/ \
    --text-dir processed_text/ \
    --attachments-dir attachments/ \
    --images-dir inline_images/ \
    --excel-dir converted_excel/ \
    --pdf-dir converted_pdf/

# Process email with detailed logging
python -m email_parser process --input path/to/email.eml --output output/ \
    --log-level debug \
    --log-file processing.log \
    --enable-detailed-logging

# Process email and generate specific metadata format (JSON/YAML)
python -m email_parser process --input path/to/email.eml --output output/ \
    --metadata-format json \
    --include-headers \
    --include-stats \
    --include-pdf-metadata

# ==========================================================
# BATCH EMAIL PROCESSING
# ==========================================================

# Basic batch processing from directory
python -m email_parser batch --input input/ --output output/

# Process batch with parallel execution including PDF conversion
python -m email_parser batch --input input/ --output output/ \
    --workers 4 \
    --batch-size 100 \
    --convert-pdf \
    --parallel-pdf-conversion \
    --enable-progress-bar

# Process batch with PDF conversion and caching
python -m email_parser batch --input input/ --output output/ \
    --convert-pdf \
    --pdf-cache-enabled \
    --pdf-cache-dir .cache/pdf \
    --pdf-cache-size 100

# Process batch with specific email filter pattern
python -m email_parser batch --input input/ --output output/ \
    --pattern "*.eml" \
    --exclude "archive_*.eml" \
    --recursive

# Process batch with error handling options
python -m email_parser batch --input input/ --output output/ \
    --error-handling graceful \
    --continue-on-error \
    --error-log errors.log \
    --pdf-fallback-enabled

# Process batch from list file
python -m email_parser batch --input-list email_list.txt --output output/ \
    --workers 4 \
    --convert-pdf

# Process batch with output organization by date
python -m email_parser batch --input input/ --output output/ \
    --organize-by-date \
    --date-format %Y/%m/%d

# Process batch with performance monitoring
python -m email_parser batch --input input/ --output output/ \
    --workers 4 \
    --enable-stats \
    --stats-output performance_stats.json \
    --monitor-memory \
    --track-api-usage

# Schedule recurring batch job (using cron-like syntax)
python -m email_parser schedule --input input/ --output output/ \
    --schedule "0 */4 * * *" \
    --workers 4 \
    --convert-pdf \
    --notification-email admin@example.com

# ==========================================================
# PDF CONVERSION SPECIFIC COMMANDS (NEW in v2.0)
# ==========================================================

# Set MistralAI API key
python -m email_parser config --set-api-key MISTRALAI_API_KEY

# Test MistralAI connection
python -m email_parser test-connection --service mistralai

# Process single PDF file
python -m email_parser convert-pdf --input document.pdf --output output/

# Process PDF with specific extraction mode
python -m email_parser convert-pdf --input document.pdf --output output/ \
    --mode text

# Batch process PDFs in directory
python -m email_parser convert-pdf-batch --input pdfs/ --output output/ \
    --workers 4 \
    --mode all \
    --image-limit 10

# View PDF processing statistics
python -m email_parser stats --type pdf --period today

# Clear PDF cache
python -m email_parser clear-cache --type pdf